import re
from enum import Enum
from io import StringIO


class Token:
    def __init__(self, pattern, name, state, suffix, line, position):
        self.pattern = pattern
        self.name = name
        self.state = state
        self.suffix = suffix
        self.line = line
        self.position = position


class Block(Enum):
    NONE = 0
    BEGIN = 1
    END = 2
    BEGIN_PARTNER = 3
    END_PARTNER = 4


class Suffix(Enum):
    NONE = 0
    PREFIX = 1
    INFIX = 2
    POSTFIX = 3


class Lexer:
    def __init__(self, source):
        self.source = source
        self.current_line = 0
        self.current_position = 0
        self.global_position = 0

    punctuation = (r"[.,!?‽…:]", 'PUNCTUATION', Block.NONE, Suffix.NONE)
    literals = [
        (r'\bcorrect\b', 'TRUE', Block.NONE, Suffix.NONE),
        (r'\bright\b', 'TRUE', Block.NONE, Suffix.NONE),
        (r'\btrue\b', 'TRUE', Block.NONE, Suffix.NONE),
        (r'\byes\b', 'TRUE', Block.NONE, Suffix.NONE),
        (r'\bincorrect\b', 'FALSE', Block.NONE, Suffix.NONE),
        (r'\bfalse', 'FALSE', Block.NONE, Suffix.NONE),
        (r'\bwrong\b', 'FALSE', Block.NONE, Suffix.NONE),
        (r'\bno\b', 'FALSE', Block.NONE, Suffix.NONE),
        (r'\bnothing\b', 'NULL', Block.NONE, Suffix.NONE),
    ]
    keywords = [
        (r'\bI did this as long as\b',
         'DO_WHILE', Block.END, Suffix.PREFIX),
        (r"\bit's not the case that\b",
         'NOT', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:is)|(?:was)|(?:were)|(?:had)|(?:has)) no more than',
         'LESS_THAN_OR_EQUAL', Block.NONE, Suffix.INFIX),
        (r'\b(?:(?:had)|(?:has)) no less than\b',
         'GREATER_THAN_OR_EQUAL', Block.NONE, Suffix.INFIX),
        (r'\bRemember when I wrote about\b',
         'IMPORT', Block.NONE, Suffix.PREFIX),
        (r"\bThat's what I would do\b",
         'IF', Block.END, Suffix.NONE),
        (r"\bThat's what I would do\b",
         'ELSE', Block.END, Suffix.NONE),
        (r'\bDid you know that\b',
         'VAR', Block.NONE, Suffix.PREFIX),
        (r'\bI did this while\b',
         'DO_WHILE', Block.END, Suffix.PREFIX),
        (r"\b(?:(?:is)|(?:was)|(?:were))(?:(?:n't)|(?: not)) greater than",
         'LESS_THAN_OR_EQUAL', Block.NONE, Suffix.INFIX),
        (r"\b(?:(?:is)|(?:was)|(?:were))(?:(?:n't)|(?: not)) less than",
         'GREATER_THAN_OR_EQUAL', Block.NONE, Suffix.INFIX),
        (r'\b(?:(?:is)|(?:was)|(?:were)) greater than\b',
         'GREATER_THAN', Block.NONE, Suffix.INFIX),
        (r'\b(?:(?:is)|(?:was)|(?:were)) more than\b',
         'GREATER_THAN', Block.NONE, Suffix.INFIX),
        (r'\b(?:(?:is)|(?:was)|(?:were)) less than\b',
         'LESS_THAN', Block.NONE, Suffix.INFIX),
        (r'\b(?:(?:had)|(?:has)) more than\b',
         'GREATER_THAN', Block.NONE, Suffix.INFIX),
        (r'\b(?:(?:had)|(?:has)) less than\b',
         'LESS_THAN', Block.NONE, Suffix.INFIX),
        (r'\bthe difference between\b',
         'SUBTRACTION', Block.NONE, Suffix.PREFIX),
        (r'\bYour faithful student\b',
         'REPORT', Block.END, Suffix.PREFIX),
        (r'\bThere was one less\b',
         'DECREMENT', Block.NONE, Suffix.PREFIX),
        (r'\bThere was one more\b',
         'INCREMENT', Block.NONE, Suffix.PREFIX),
        (r"\bThat's what I did\b",
         'WHILE', Block.END, Suffix.NONE),
        (r"\bHere's what I did\b",
         'DO_WHILE', Block.BEGIN, Suffix.NONE),
        (r'\bThat’s all about\b',
         'PARAGRAPH', Block.END, Suffix.PREFIX),
        (r'\bIn regards to\b',
         'SWITCH', Block.BEGIN, Suffix.PREFIX),
        (r'\bgot one less\b',
         'DECREMENT', Block.NONE, Suffix.POSTFIX),
        (r'\bgot one more\b',
         'INCREMENT', Block.NONE, Suffix.POSTFIX),
        (r'\bThen you get\b',
         'RETURN', Block.NONE, Suffix.PREFIX),
        (r'\bAs long as\b',
         'WHILE', Block.BEGIN, Suffix.PREFIX),
        (r'\b(?:(?:nd)|(?:rd)|(?:st)|(?:th))? hoof\b',
         'CASE', Block.END_PARTNER, Suffix.INFIX),
        (r'\bConditional conclusion\b',
         'DEFAULT', Block.NONE, Suffix.PREFIX),
        (r'\bToday I learned\b',
         'MANE_PARAGRAPH', Block.BEGIN, Suffix.PREFIX),
        (r'\bmultiplied with\b',
         'MULTIPLICATION', Block.NONE, Suffix.INFIX),
        (r'\bthe product of\b',
         'MULTIPLICATION', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\bI remembered\b',
         'RUN', Block.NONE, Suffix.PREFIX),
        (r'\bdivided by\b',
         'DIVISION', Block.NONE, Suffix.INFIX),
        (r'\bnow likes?\b',
         'VARIABLE_VALUE_ASSIGNMENT', Block.NONE, Suffix.INFIX),
        (r'\bI learned\b',
         'PARAGRAPH', Block.NONE, Suffix.PREFIX),
        (r'\badded to\b',
         'ADDITION', Block.NONE, Suffix.INFIX),
        (r'\bOr else\b',
         'ELSE', Block.BEGIN, Suffix.NONE),
        (r'\bI wrote\b',
         'PRINT', Block.NONE, Suffix.PREFIX),
        (r'\bI asked\b',
         'PROMPT_USER_FOR_IMPORT', Block.NONE, Suffix.PREFIX),
        (r'\bI heard\b',
         'READLINE', Block.NONE, Suffix.PREFIX),
        (r'\bI would\b',
         'RUN', Block.NONE, Suffix.PREFIX),
        (r'\bare now\b',
         'VARIABLE_VALUE_ASSIGNMENT', Block.NONE, Suffix.INFIX),
        (r'\bOn the\b',
         'CASE', Block.BEGIN_PARTNER, Suffix.INFIX),
        (r'\bto get\b',
         'RETURNED_VARIABLE_TYPE_DEFINITION', Block.NONE, Suffix.INFIX),
        (r'\bI said\b',
         'PRINT', Block.NONE, Suffix.PREFIX),
        (r'\bI sang\b',
         'PRINT', Block.NONE, Suffix.PREFIX),
        (r'\bI read\b',
         'READLINE', Block.NONE, Suffix.PREFIX),
        (r'\bis now\b',
         'VARIABLE_VALUE_ASSIGNMENT', Block.NONE, Suffix.INFIX),
        (r'\b(?:(?:many )|(?:the ))?sentences\b',
         'CHAR_ARRAY_OF_ARRAYS_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:many )|(?:the ))?numbers\b',
         'NUMBER_64_ARRAY_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:many )|(?:the ))?phrases\b',
         'CHAR_ARRAY_OF_ARRAYS_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:an )|(?:the ))?argument\b',
         'BOOLEAN_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:a )|(?:the ))?character\b',
         'CHAR_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:many )|(?:the ))?quotes\b',
         'CHAR_ARRAY_OF_ARRAYS_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:many )|(?:the ))?words\b',
         'CHAR_ARRAY_OF_ARRAYS_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:a )|(?:the ))?sentence\b',
         'CHAR_ARRAY_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:a )|(?:the ))?number\b',
         'NUMBER_64_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:a )|(?:the ))?letter\b',
         'CHAR_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:a )|(?:the ))?phrase\b',
         'CHAR_ARRAY_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:a )|(?:the ))?quote\b',
         'CHAR_ARRAY_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:(?:a )|(?:the ))?word\b',
         'CHAR_ARRAY_TYPE', Block.NONE, Suffix.PREFIX),
        (r"\bwere(?:(?:n't)|(?: not))\b",
         'NOT_EQUAL', Block.NONE, Suffix.INFIX),
        (r"\bhad(?:(?:n't)|(?: not))\b",
         'NOT_EQUAL', Block.NONE, Suffix.INFIX),
        (r"\bhas(?:(?:n't)|(?: not))\b",
         'NOT_EQUAL', Block.NONE, Suffix.INFIX),
        (r"\bwas(?:(?:n't)|(?: not))\b",
         'NOT_EQUAL', Block.NONE, Suffix.INFIX),
        (r"\bis(?:(?:n't)|(?: not))\b",
         'NOT_EQUAL', Block.NONE, Suffix.INFIX),
        (r'\b(?:the )?characters\b',
         'CHAR_ARRAY_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:the )?letters\b',
         'CHAR_ARRAY_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:the )?logics\b',
         'BOOLEAN_ARRAY_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\b(?:the )?logic\b',
         'BOOLEAN_TYPE', Block.NONE, Suffix.PREFIX),
        (r'\bOtherwise\b',
         'ELSE', Block.END, Suffix.NONE),
        (r'\bbecomes?\b',
         'VARIABLE_VALUE_ASSIGNMENT', Block.NONE, Suffix.INFIX),
        (r'\bsubtract\b',
         'SUBTRACTION', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\bmultiply\b',
         'MULTIPLICATION', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\bwithout\b',
         'SUBTRACTION', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\balways\b',
         'CONSTANT_INITIALIZATION', Block.NONE, Suffix.PREFIX),
        (r'\bdivide\b',
         'DIVISION', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\beither\b',
         'EXCLUSIVE_OR', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\blikes?\b',
         'VARIABLE_VALUE_ASSIGNMENT', Block.NONE, Suffix.INFIX),
        (r'\busing\b',
         'LISTING_PARAGRAPH_PARAMETERS', Block.NONE, Suffix.PREFIX),
        (r'\btimes\b',
         'MULTIPLICATION', Block.NONE, Suffix.INFIX),
        (r'\bWhile\b',
         'WHILE', Block.BEGIN, Suffix.PREFIX),
        (r'\bminus\b',
         'SUBTRACTION', Block.NONE, Suffix.INFIX),
        (r'\bplus\b',
         'ADDITION', Block.NONE, Suffix.INFIX),
        (r'\bWhen\b',
         'IF', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\bthen\b',
         'IF_POSTFIX', Block.END_PARTNER, Suffix.POSTFIX),
        (r'\bDear\b',
         'REPORT', Block.BEGIN, Suffix.PREFIX),
        (r'\bwith\b',
         'RETURNED_VARIABLE_TYPE_DEFINITION', Block.NONE, Suffix.INFIX),
        (r'\bwere\b',
         'EQUAL', Block.NONE, Suffix.INFIX),
        (r'\badd\b',
         'ADDITION', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\badd\b',
         'INCREMENT', Block.NONE, Suffix.PREFIX),
        (r'\band\b',
         'AND', Block.NONE, Suffix.INFIX),
        (r'\band\b',
         'ADDITION', Block.END_PARTNER, Suffix.INFIX),
        (r'\band\b',
         'SUBTRACTION', Block.END_PARTNER, Suffix.INFIX),
        (r'\band\b',
         'MULTIPLICATION', Block.END_PARTNER, Suffix.INFIX),
        (r'\band\b',
         'AND', Block.NONE, Suffix.INFIX),
        (r'\bnot\b',
         'NOT', Block.NONE, Suffix.PREFIX),
        (r'\bhad\b',
         'EQUAL', Block.NONE, Suffix.INFIX),
        (r'\bhas\b',
         'VAR', Block.NONE, Suffix.INFIX),
        (r'\bhas\b',
         'EQUAL', Block.NONE, Suffix.INFIX),
        (r'\bwas\b',
         'VAR', Block.NONE, Suffix.INFIX),
        (r'\bwas\b',
         'EQUAL', Block.NONE, Suffix.INFIX),
        (r'\bIf\b',
         'IF', Block.BEGIN_PARTNER, Suffix.PREFIX),
        (r'\bor\b',
         'OR', Block.NONE, Suffix.INFIX),
        (r'\bis\b',
         'VAR', Block.NONE, Suffix.INFIX),
        (r'\bis\b',
         'EQUAL', Block.NONE, Suffix.INFIX),
    ]


    def remove_comments(self, text):
        return re.sub()

